let interpolation l =
	let rec aux (x0, y0) f = function
		|[] -> f
		|(x1,y1)::t ->
			let a = (y1 -. y0) /. (x1 -. x0) in
			let b = y1 -. a *. x1 in
			let g = function
				|x when x <= x1 -> f x
				|x -> a *. x +. b in
			aux (x1, y1) g t in
	let f = fun x -> 0. in
	match l with
		|[] -> failwith "Liste vide"
		|(x0, y0)::t -> aux (x0, y0) f t;;


let f = fun x -> x *. x;;

let liste k =
	let rec aux r = function
		| -1 -> r
		|n -> aux (n::r) (n-1)
	in aux [] k;;

let l0 = liste 100;;
let l1 = List.map float_of_int l0;;
let l2 = List.map f l2;;

let l = List.combine l2 l3;;

let f1 = fun x -> f x;;
let f2 = interpolation l;;

let iof = int_of_float;;
let foi = float_of_int;;



let r = Array.make 500 0.;;
for i = 0 to 499 do
	r.(i) <- (foi i) /. 10.
done;;

let g1 = Array.map f1 r;;
let g2 = Array.map f2 r;;

let h1 = Array.make 500 (0,0);;
for i = 0 to 499 do
	h1.(i) <- (i, iof g1.(i))
done;; 

let h2 = Array.make 500 (0,0);;
for i = 0 to 499 do
	h2.(i) <- (i, iof g2.(i))
done;; 

#load "graphics.cma";;
open Graphics;;

open_graph "700x700";
clear_graph();

set_color (rgb 255 0 0);
draw_poly_line h1;

set_color (rgb 0 0 255);
draw_poly_line h2;

;;








